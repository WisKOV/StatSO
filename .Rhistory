libary(devtools)
library(devtools)
install_github("WisKOV/StatSO")
modus(c(1,1,2,2,3))
cirkeldiagram(c(1,1,2,2,3))
?cirkeldiagram
?table
?barplot
?hist
?prop.table
?table
?barplot
?boxplot
?pie
?cirkeldiagram
??cirkeldiagram
?rainbow
?I
?gnorm
?qnorm
library(MASS)
?MASS
??MASS
head(Animals)
mean(Animals$brain)
sd(Animals$brain)
?z.test
??z.test
library(BSDA)
z.test(Animals$brain,sd=1300)
z.test(Animals$brain,mu=500,sigma.x=1300)
MeanCI(Animals$brain,sd=1300)
library(DescTools)
MeanCI(Animals$brain,sd=1300)
library(MASS)
library(BSDA)
library(DescTools)
head(Animals)
mean(Animals$brain)
sd(Animals$brain)
MeanCI(Animals$brain,sd=1300)
z.test(Animals$brain,mu=500,sigma.x=1300)
t.test(Animals$brain,mu=500,sigma.x=1300)
t.test()
library(MASS)
library(BSDA)
library(DescTools)
head(Animals)
mean(Animals$brain)
sd(Animals$brain)
MeanCI(Animals$brain,sd=1300)
z.test(Animals$brain,mu=500,sigma.x=1300)
t.test(Animals$brain,mu=500,sigma.x=1300)
t.test(Animals$brain,mu=500)
MeanCI(Animals$brain)
z.test(Animals$brain,mu=500)
#' grafnorm
#'
#' Functie tekent de grafiek van de dichtheidsfunctie bij een normale verdeling.
#'
#' @param mean gemiddelde van de normale verdeling (default = 0)
#' @param sd standaardafwijking van de normale verdeling (default = 1)
#'
#' @return grafiek
#' @export
#'
#' @examples grafnorm(0,1)
#' grafnorm(1,2)
grafnorm=function(mean=0,sd=1)
{
xlijst=seq(mean-4*sd,mean+4*sd,by=sd/100)
ylijst=dnorm(xlijst,mean=mean,sd=sd)
titel=paste("Dichtheidsfunctie normale verdeling (mu = ",mean,", sigma = ",sd,")",sep="")
plot(xlijst,ylijst,type="l",main=titel,xlab="",ylab="")
}
#' kansnorm
#'
#' Functie bepaalt bij een normale verdeling de kans en tekent de bijhorende oppervlakte.
#'
#' @param beginwaarde beginwaarde van het interval (default = -oneindig)
#' @param eindwaarde eindwaarde van het interval (default = + oneindig)
#' @param mean gemiddelde van de normale verdeling (default = 0)
#' @param sd standaardafwijking van de normale verdeling (default = 1)
#' @param ... eventuele andere argumenten (bv. main)
#'
#' @return waarde van de kans en tekening van oppervlakte onder dichtheidsfunctie
#' @export
#'
#' @examples kansnorm(beginwaarde=2)
#' kansnorm(beginwaarde=-1,eindwaarde=1)
#' kansnorm(beginwaarde=0,mean=1,sd=2,main="Laatste voorbeeld")
kansnorm=function(beginwaarde=-Inf,eindwaarde=+Inf,mean=0,sd=1,...)
{
xlijst=seq(mean-4*sd,mean+4*sd,by=sd/100)
ylijst=dnorm(xlijst,mean=mean,sd=sd)
plot(xlijst,ylijst,type="l",xlab="",ylab="",axes=F,...)
if(beginwaarde==-Inf & eindwaarde==+Inf){
kans=1
polygon(c(xlijst,mean+4*sd,mean-4*sd),c(ylijst,0,0),col='blue')
}
else{
if(beginwaarde==-Inf&eindwaarde<+Inf)
{
kans=pnorm(eindwaarde,mean=mean,sd=sd)
xrange=seq(mean-4*sd,eindwaarde,length.out=100)
polygon(c(xrange,eindwaarde,mean-4*sd),c(dnorm(xrange,mean=mean,sd=sd),0,0),col='blue')
}
else{
if(beginwaarde>-Inf & eindwaarde==+Inf)
{
kans=pnorm(beginwaarde,mean=mean,sd=sd,lower.tail=FALSE)
xrange=seq(beginwaarde,mean+4*sd,length.out=100)
polygon(c(xrange,mean+4*sd,beginwaarde),c(dnorm(xrange,mean=mean,sd=sd),0,0),col='blue')
}
else {
kans=pnorm(eindwaarde,mean=mean,sd=sd)-pnorm(beginwaarde,mean=mean,sd=sd)
xrange=seq(beginwaarde,eindwaarde,length.out=100)
polygon(c(xrange,eindwaarde,beginwaarde),c(dnorm(xrange,mean=mean,sd=sd),0,0),col='blue')
}}}
axis(side=1,at=mean+(-4:4)*sd,pos=0)
kans
}
#' grafbinom
#'
#' Functie tekent de grafiek (staafdiagram) van de discrete kansverdeling bij een binomiale verdeling.
#'
#' @param n waarde van de parameter n (natuurlijk getal) horend bij de binomiale verdeling = aantal pogingen
#' @param p waarde van parameter p (0<p<1) horend bij de binomiale verdeling = kans op succes
#'
#' @return grafiek (staafdiagram)
#' @export
#'
#' @examples grafbinom(10,0.4)
grafbinom=function(n,p)
{
if((p<=0) | (p>=1)){stop("p moet voldoen aan 0<p<1")}
if((n<0)|!(n==round(n))){stop("n moet een natuurlijk getal zijn")}
probs=dbinom(0:n,size=n,prob=p)
titel=paste('Binomiale kansverdeling (n = ',n,', p = ',p,')',sep="")
barplot(probs,names.arg=c(0:n),col='grey',main=titel)
}
#' kansbinom
#'
#' Functie bepaalt bij een binomiale verdeling de kans en tekent de bijhorende oppervlakte.
#'
#' @param beginwaarde beginwaarde van het interval (default = 0)
#' @param eindwaarde eindwaarde van het interval (default = NULL)
#' @param n waarde van de parameter n (natuurlijk getal) horend bij de binomiale verdeling = aantal pogingen
#' @param p waarde van parameter p (0<p<1) horend bij de binomiale verdeling = kans op succes
#' @param ... eventuele andere argumenten (bv. main)
#'
#' @return waarde van de kans en tekening van de oppervlakte onder de grafiek
#' @export
#'
#' @examples kansbinom(3,5,10,0.4)
#' kansbinom(eindwaarde=5,n=10,p=0.4)
#' kansbinom(beginwaarde=6,n=10,p=0.4,main='Laatste voorbeeld')
kansbinom=function(beginwaarde=0,eindwaarde=NULL,n,p,...)
{
if((p<=0) | (p>=1)){stop("p moet voldoen aan 0<p<1")}
if((n<0)|!(n==round(n))){stop("n moet een natuurlijk getal zijn")}
if(is.null(eindwaarde)){eindwaarde=n}
if(eindwaarde>n){
stop("eindwaarde moet een natuurlijk getal tussen 0 en n zijn")}
probs=dbinom(0:n,size=n,prob=p)
if((beginwaarde==0)&(eindwaarde==n))
{
kleur="blue"
uitkomstkans=1}
if((beginwaarde==0)&(eindwaarde<n))
{
kleur=c(rep("blue",eindwaarde+1),rep("grey",n-eindwaarde))
uitkomstkans=pbinom(eindwaarde,n,p)
}
if((beginwaarde>0)&(eindwaarde==n))
{
kleur=c(rep("grey",beginwaarde),rep("blue",n+1-beginwaarde))
uitkomstkans=1-pbinom(beginwaarde-1,n,p)
}
if((beginwaarde>0)&(eindwaarde<n))
{
kleur=c(rep("grey",beginwaarde),rep("blue",eindwaarde-beginwaarde+1), rep("grey",n-eindwaarde))
uitkomstkans=pbinom(eindwaarde,n,p)-pbinom(beginwaarde-1,n,p)
}
barplot(probs,names.arg=c(0:n),col=kleur,...)
uitkomstkans
}
#' cirkeldiagram
#'
#' Functie maakt een cirkeldiagram van een categorische variabele, waarbij de categorieÃ«n in een legende verschijnen en de relatieve frequenties bij het cirkeldiagram zelf.
#'
#' @param categorischevariabele de variabele
#' @param ... eventuele andere argumenten (bv. main)
#'
#' @return cirkeldiagram
#' @export
#'
#' @examples cirkeldiagram(c('cat-a','cat-a','cat-b','cat-c','cat-a','cat-b'))
#' cirkeldiagram(c('s','t','a','t','i','s','t','i','e','k'),main='Letters van het woord "statistiek"')
cirkeldiagram=function(categorischevariabele,...)
{
Freq=table(categorischevariabele)
kleurtjes=rainbow(length(Freq))
Eigenlabels=prop.table(Freq)*100
Eigenlabels=round(Eigenlabels,2)
Eigenlabels=paste(Eigenlabels,"%",sep=" ")
pie(Freq,labels=Eigenlabels,col=kleurtjes,...)
legend("topleft",names(Freq),fill=kleurtjes)
}
#' Modus
#'
#' Functie bepaalt de centrummaat modus van een dataset.
#' Indien er verschillende waardes zijn die het meest voorkomen, dan worden deze allemaal bepaald.
#'
#' @param x een dataset
#'
#' @return de modus of modi van x
#' @export
#'
#' @examples modus(c(1,1,2,2,3))
#' modus(c('s','t','a','t','i','s','t','i','e','k'))
#' modus(c('s','e','c','u','n','d','a','i','r','o','n','d','e','r','w','i','j','s'))
modus=function(x)
{
u=unique(x)
tab=tabulate(match(x, u))
u[tab == max(tab)]
}
devtools::load_all(".")
library(StatSO)
library(StatSO)
library(StatSO)
library(devtools)
install_github(WisKOV/StatSO)
install_github("WisKOV/StatSO")
detach("package:StatSO", unload = TRUE)
install_github("WisKOV/StatSO")
library(StatSO)
devtools::load_all(".")
library(StatSO)
